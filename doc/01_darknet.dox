/** @mainpage Darknet/YOLO

@image html darknet_and_hank_ai_logos.png width=640 height=320

Browse <a target="_blank" href="https://hank.ai/darknet-welcomes-hank-ai-as-official-sponsor-and-commercial-entity/">Hank.ai's announcement in May 2023</a> on officially sponsoring the Darknet/YOLO codebase.

@section download Download Darknet/YOLO

- Download the latest version of Darknet/YOLO from here: <a target="_blank" href="https://codeberg.org/CCodeRun/darknet">https://codeberg.org/CCodeRun/darknet</a>
- See the instructions on <a target="_blank" href="https://codeberg.org/CCodeRun/darknet#building">how to build Darknet/YOLO</a>
- If you'd like additional assistance, join the Darknet/YOLO Discord server:  <a target="_blank" href="https://discord.gg/MQw32W9Cqr">https://discord.gg/MQw32W9Cqr</a>
- Please read the <a target="_blank" href="https://www.ccoderun.ca/programming/darknet_faq/">Darknet/YOLO FAQ</a>

@section using_cli Using Darknet/YOLO

- Run @p "darknet help" to get a list of common commands to run.
	- On Linux, if you completed <a target="_blank" href="https://codeberg.org/CCodeRun/darknet#linux-cmake-method">the build and installation steps</a>, all of the %Darknet commands should have been installed to @p /usr/bin/, such as @p /usr/bin/darknet.
	- On Windows, if you completed <a target="_blank" href="https://codeberg.org/CCodeRun/darknet#windows-cmake-method">the build and installation steps</a>, all of the %Darknet commands should have been installed to @p "C:/Program Files/Darknet/bin/", such as @p "C:/Program Files/Darknet/bin/darknet.exe".
- Take a look at the %Darknet example applications in <a href="files.html">src-examples/</a> to see a list of possible commands to run.
- To train your own custom Darknet/YOLO neural network, see the following:
	- <a target="_blank" href="https://www.ccoderun.ca/programming/darknet_faq/#training_command">the Darknet/YOLO FAQ</a>,
	- <a target="_blank" href="https://codeberg.org/CCodeRun/darknet#training">the Darknet/YOLO readme in the repo</a>,
	- <a target="_blank" href="https://www.youtube.com/watch?v=ciEcM6kvr3w">Stéphane's YouTube tutorials</a>.

@section other Other Darknet/YOLO Projects

- Both the original @p pjreddie and @p alexeyab %Darknet repos are no longer supported.  Please update to <a target="_blank" href="https://codeberg.org/CCodeRun/darknet">the new Darknet/YOLO repo</a>.
	- For additional details, see the FAQ:  <a target="_blank" href="https://www.ccoderun.ca/programming/darknet_faq/#which_repos_to_use_and_avoid">https://www.ccoderun.ca/programming/darknet_faq/#which_repos_to_use_and_avoid</a>.
- <a target="_blank" href="https://codeberg.org/CCodeRun/DarkHelp#what-is-the-darkhelp-c-api">DarkHelp</a> is a professional, free, open-source CLI tool and C/C++/Python API to use Darknet/YOLO.
- <a target="_blank" href="https://codeberg.org/CCodeRun/DarkMark#what-is-darkmark">DarkMark</a> is a free open-source tool for managing Darknet/YOLO project, annotating images, videos, and PDFs, and generating Darknet/YOLO training files.
- <a target="_blank" href="https://www.youtube.com/c/StephaneCharette/videos">Stéphane's YouTube channel</a> with many Darknet/YOLO "How-To" videos.

@section programming Programming With Darknet/YOLO

Darknet/YOLO is not just a CLI tool.  When you build Darknet/YOLO, you're building a library you can call from within @p C applications, @p C++ applications, or from @p Python.

A description of the Darknet/YOLO API can be found here:  @ref api

There are other language bindings, but those are not maintained within the Darknet/YOLO project.  If you own or know of such a project, let us know and we'll link from here to your project.

@section developers The Darknet/YOLO Source Code

The Doxygen pages are meant to assist **software developers** in understanding the internals of the Darknet/YOLO <em>source code</em>.

Things to look up include:

- @ref darknet.h (C API)
- @ref darknet.hpp (C++ API)
- @ref Darknet (C++ namespace)
- @ref Darknet::parse_arguments()
- @ref Darknet::load_neural_network()
- @ref Darknet::free_neural_network()
- @ref Darknet::set_detection_threshold()
- @ref Darknet::set_non_maximal_suppression_threshold()
- @ref Darknet::set_rounded_corner_bounding_boxes()
- @ref Darknet::set_output_stream()
- @ref Darknet::predict()
- @ref Darknet::annotate()
- ...and many more.  See the @p C++ namespace @ref Darknet for details.

Other useful functions:

- @ref main()
- @ref darknet_fatal_error()
- @ref train_detector()
	- @ref train_network() (CPU only)
	- @ref train_network_waitkey() (1 GPU)
	- @ref train_networks() (multi-GPU)
- @ref Darknet::TimingAndTracking

Configuration files:

- @ref Darknet::CfgFile
	- @ref Darknet::CfgSection
		- @ref Darknet::CfgLine

*/
